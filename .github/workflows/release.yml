name: release
on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  create-crates-io-release:
    name: create-crates-io-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1

    - name: Log in to crates.io
      run: cargo login ${{ env.CRATES_IO_TOKEN }}
      env:
        CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

    - name: Publish to crates.io
      run: cargo publish --dry-run --allow-dirty

  create-gh-pages-release:
    name: create-gh-pages-release
    runs-on: ubuntu-latest
    env:
      VERSION:
    steps:
      - name: Get the version
        run: echo ::set-env name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: test
          release_name: ${{ env.VERSION }}
          draft: true

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-gh-pages-release:
    name: build-gh-pages-release
    needs: ["create-gh-pages-release"]
    runs-on: ubuntu-latest
    env:
      CARGO: cargo
      # when CARGO is set to CROSS, this is set to `--target matrix.target`
      TARGET_FLAGS:
      # when CARGO is set to CROSS, TARGET_DIR includes matrix.target
      TARGET_DIR: ./target
    strategy:
      matrix:
        # we will build for x86_64 linux (desktop), armv6 (RPi 0-3) and armv7 (RPi4)
        build: [linux, linux-armv7, linux-armv6]
        include:
        - build: linux
          target: x86_64-unknown-linux-gnu
        - build: linux-armv7
          target: armv7-unknown-linux-gnueabihf
        - build: linux-armv6
          target: armv-unknown-linux-gnueabihf
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Install latest stable Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        target: ${{ matrix.target }}
    
    - name: Use Cross
      run: |
        # FIXME: to work around bugs in latest cross release, install master
        # see: https://github.com/rust-embedded/cross/issues/357
        cargo install --git https://github.com/rust-embedded/cross
        echo "::set-env name=CARGO::cross"
        echo "::set-env name=TARGET_FLAGS::--target ${{ matrix.target }}"
        echo "::set-env name=TARGET_DIR::./target/${{ matrix.target }}"

    - name: Get release download URL
      uses: actions/download-artifact@v1
      with:
        name: artifacts
        path: artifacts

    - name: Set release upload URL and release version
      shell: bash
      run: |
        release_upload_url="$(cat artifacts/release-upload-url)"
        echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
        echo "release upload url: $RELEASE_UPLOAD_URL"
        release_version="$(cat artifacts/release-version)"
        echo "::set-env name=RELEASE_VERSION::$release_version"
        echo "release version: $RELEASE_VERSION"
    
    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Build archive
      shell: bash
      run: |
        staging="heliocron-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
        mkdir -p "$staging"/

        cp {README.md,LICENSE-APACHE,LICENSE-MIT} "$staging/"
        cp "target/${{ matrix.target }}/release/heliocron" "$staging/"

        tar czf "$staging.tar.gz" "$staging"
        echo "::set-env name=ASSET::$staging.tar.gz"
    
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
